/* Custom */
@import url("./style.css") layer(theme);
@import url("./highlight.css") layer(theme-highlights);

@layer theme, theme-highlights, starbeam-theme;

@layer starbeam-theme {
  :root {
    --size-unit: 1.5rem;
    --ratio: 1.5;
    --size-sm: calc(var(--size-unit) / var(--ratio));
    --size-xs: calc(var(--size-sm) / var(--ratio));
    --size-2xs: calc(var(--size-xs) / var(--ratio));
    --size-3xs: calc(var(--size-2xs) / var(--ratio));
    --size-4xs: calc(var(--size-3xs) / var(--ratio));
    --size-lg: calc(var(--size-unit) * var(--ratio));
    --size-xl: calc(var(--size-lg) * var(--ratio));
    --size-2xl: calc(var(--size-xl) * var(--ratio));
    --size-3xl: calc(var(--size-2xl) * var(--ratio));
    --size-4xl: calc(var(--size-3xl) * var(--ratio));
  }

  /** override upstream */
  :root {
    --light-color-warning-text: #222;
    --light-color-background-warning: #e6e600;
    --light-color-accent: #c5c7c9;
    --light-color-text: #222;
    --light-color-text-aside: #6e6e6e;
    --light-color-link: #1f70c2;
  }

  /** dark mode */
  @media (prefers-color-scheme: dark) {
    :root {
      --lightness-scheme: -1;
    }
  }

  @media not (prefers-color-scheme: dark) {
    :root {
      --lightness-scheme: 1;
    }
  }

  :root {
    --hue: 220;
    --hue-purple: 328;
    --hue-yellow: 109;
    --hue-blue: 230;
    --hue-red: 29;
    --hue-green: 142;
    --hue-teal: 190;
  }

  :root {
    --card-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.2);
    --card-radius: var(--size-3xs);
    --card-padding: var(--size-sm);
  }

  *,
  ::before,
  ::after,
  ::marker {
    --color-background: var(--color-blank);

    /** 
     * A scheme of 1 means the background is light; -1 means the background is
     * dark.
     *
     * You can invert the scheme by setting `--lightness-flip` to `-1`.
     */
    --lightness-scheme: 1;

    /**
      * A flip of -1 inverts the colors
      */

    /**
      * The base lightness is neutral (50%). In a dark scheme, the background
      * colors are adjusted from the base towards 100%, while in a light
      * scheme, the background colors are adjusted from the base towards
      * 0%.
      *
      * Foreground colors work in the opposite direction.
      */
    --lightness-base: 50%;

    --lightness-tobg-adjustment: calc(
      5 * var(--lightness-scheme) * var(--lightness-flip, 1)
    );
    --lightness-tofg-adjustment: calc(var(--lightness-tobg-adjustment) * -1);
    --lightness-bg: calc(
      var(--lightness-base) + (var(--lightness-tobg-adjustment) * 7%)
    );
    --lightness-icon: calc(
      var(--lightness-base) + (var(--lightness-tobg-adjustment) * 4%)
    );
    --lightness-border: calc(
      var(--lightness-base) + (var(--lightness-tofg-adjustment) * 9%)
    );
    --lightness-inline-border: calc(
      var(--lightness-base) + (var(--lightness-tobg-adjustment) * 5%)
    );
    --lightness-block-border: calc(
      var(--lightness-base) + (var(--lightness-tofg-adjustment) * 9%)
    );
    --lightness-blank: calc(
      var(--lightness-base) + (var(--lightness-tobg-adjustment) * 10%)
    );
    --chroma-normal: 20%;
    --chroma-icon-intense: 50%;
    --chroma-icon-subdued: 30%;

    --color-blank: oklch(var(--lightness-blank) 0% var(--hue));

    --color-bg-base: oklch(var(--lightness-bg) var(--chroma-normal) var(--hue));
    --color-bg: var(--color-blank);
    --color-bg-accent: oklch(
      from var(--color-bg-base) calc(l + var(--lightness-tobg-adjustment)) c h
    );
    --color-bg-inline-accent: oklch(from var(--color-bg-base) l c h);

    --color-inline-border: oklch(
      var(--lightness-inline-border) var(--chroma-normal) var(--hue)
    );

    --color-block-border: oklch(
      var(--lightness-inline-border) var(--chroma-normal) var(--hue)
    );

    --icon-bg-intense: oklch(
      var(--lightness-icon) var(--chroma-icon-intense) var(--hue)
    );
    --icon-bg-subdued: oklch(
      from var(--icon-bg-intense) l var(--chroma-icon-intense) h
    );

    --color-text-base: oklch(
      calc(var(--lightness-base) + (var(--lightness-tofg-adjustment) * 1%))
        var(--chroma-icon-intense) var(--hue)
    );

    --color-text-intense: oklch(
      calc(var(--lightness-base) + (var(--lightness-tofg-adjustment) * 0%))
        var(--chroma-icon-intense) var(--hue)
    );
  }

  *,
  ::before,
  ::after,
  ::marker {
    --color-background-secondary: var(--color-bg-base);

    --color-icon-background: oklch(
      from var(--icon-bg-intense) calc(l + 100) 0% h
    );
    --color-ts-project: oklch(
      from var(--color-text-base) l c var(--hue-purple)
    );
    --color-ts-enum: oklch(from var(--color-text-base) l c var(--hue-yellow));
    --color-ts-variable: oklch(
      from var(--color-text-intense) l c var(--hue-blue)
    );
    --color-ts-function: oklch(
      from var(--color-text-base) l c var(--hue-purple)
    );
    --color-ts-class: oklch(from var(--color-text-base) l c var(--hue-blue));
    --color-ts-interface: oklch(
      from var(--color-text-base) l c var(--hue-green)
    );
    --color-ts-type-alias: oklch(
      from var(--color-text-base) l c var(--hue-red)
    );
    --color-ts-type-parameter: oklch(
      from var(--color-text-intense) l var(--chroma-icon-subdued) var(--hue-red)
    );

    --color-text: oklch(
      from var(--color-text-base)
        calc(l + (var(--lightness-tofg-adjustment) * 3)) 20% var(--hue-red)
    );
    --color-text-aside: oklch(
      from var(--color-text-base) calc(l + var(--lightness-tofg-adjustment) * 2)
        10% var(--hue-red)
    );

    --color-ts-method: var(--color-ts-function);
    --color-ts-call-signature: var(--color-ts-method);
    --color-ts-parameter: var(--color-ts-variable);
  }

  summary.tsd-accordion-summary {
    display: flex;
    align-items: center;

    .tsd-index-heading {
      margin: 0;
    }

    & h3,
    h5 {
      display: flex;
      align-items: end;
      column-gap: 0.5rem;
    }
  }

  html:not(.filter-advanced) details[data-key="Advanced Usage"] {
    display: none;
  }

  .col-content {
    display: flex;
    flex-direction: column;

    & > * {
      margin: 0;
      padding: 0;
    }

    & :last-child {
      height: 1fr;
    }

    & > .tsd-sources {
      margin-block: var(--size-unit);
    }

    & > .tsd-panel + .tsd-sources {
      margin-block-start: 0;
    }
  }

  .tsd-hierarchy:has(li:first-child:last-child) {
    display: none;
  }

  .tsd-index-panel {
    box-shadow: var(--card-shadow);
    padding: var(--card-padding);
    border-radius: var(--card-radius);
    margin: 0;
  }

  .tsd-nested-navigation {
    margin-left: var(--size-unit);

    & a {
      display: flex;
      align-items: bottom;
    }
  }

  ul.tsd-parameter-list {
    --accent-color: oklch(from var(--color-ts-parameter) l c h);
  }

  ul.tsd-type-parameter-list {
    --accent-color: oklch(from var(--color-ts-type-parameter) l c h);
  }

  .tsd-signature {
    margin-block-end: var(--size-xs);
    box-shadow: var(--card-shadow);
  }

  ul.tsd-signatures {
    display: grid;

    & > .tsd-description + .tsd-signature {
      margin-block-start: var(--size-unit);
    }

    & > * {
      box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.2);
      padding: var(--size-unit);
      transition: 0.3s;
    }

    & ul.tsd-parameter-list,
    & ul.tsd-type-parameter-list {
      display: grid;
      row-gap: var(--size-xs);
      padding: 0;

      & li:has(.ts-flagOptional) {
        opacity: 0.7;
      }

      & h5 {
        font-family: monospace;
        display: flex;
        flex-wrap: wrap;
        column-gap: 0.7ch;

        & .ts-flagOptional {
          display: none;
          color: oklch(
            from var(--color-ts-parameter)
              calc(l + var(--lightness-tobg-adjustment)) c var(--hue-teal)
          );

          & + span.tsd-kind-parameter {
            &::after {
              content: "?";
              color: oklch(from var(--color-ts-parameter) l c var(--hue-teal));
            }
          }
        }
      }

      & > li {
        display: grid;
        padding-inline-start: var(--size-sm);
        border-inline-start: var(--size-2xs) solid var(--accent-color);
        row-gap: var(--size-3xs);

        & > div.tsd-comment {
          padding-inline-start: var(--size-unit);
        }

        & > div:empty {
          display: none;
        }

        & > * {
          margin: 0;
        }
      }
    }

    .tsd-kind-type-parameter {
      color: var(--color-ts-type-parameter);
    }
  }

  .tsd-signature + .tsd-description > .tsd-comment,
  .tsd-signature + .tsd-comment {
    grid-column: 1 / -1;
    background-color: var(--color-bg-accent);
    padding-block: var(--size-sm);
    padding: var(--card-padding);
    box-shadow: var(--card-shadow);
    border-radius: 0;

    &:empty {
      display: none;
    }

    &:first-of-type {
      border-radius: var(--card-radius) var(--card-radius) 0 0;
    }
  }

  .tsd-signature + .tsd-description {
    & > :first-child:not(.tsd-comment) {
      padding-block-start: 0;
      margin-block-start: 0;
    }

    & > :last-child {
      padding-block-end: 0;
      margin-block-end: 0;
    }
  }

  .tsd-signature + :is(.tsd-description, .tsd-comment) {
    display: grid;
    grid-template-columns: var(--size-unit) 1fr var(--size-unit);
    row-gap: var(--size-sm);
    padding-inline: 0;
    padding-block: var(--size-sm);

    & :is(.ts-flagOverload, .ts-flagPrimary) {
      display: none;
    }

    &:has(.ts-flagPrimary) {
      margin-block-end: var(--size-unit);
    }

    &:has(div.tsd-comment + :is(.tsd-parameters, .tsd-panel)) {
      padding-block-start: 0;
    }

    & > * {
      grid-column: 2;
      margin: 0;
    }
  }

  .tsd-comment {
    display: grid;
    row-gap: var(--size-sm);
    margin-block: 0;

    & > * {
      margin: 0;
    }

    & > h4 {
      display: none;
    }
  }

  .tsd-panel-group {
    display: grid;
    row-gap: var(--size-sm);
    margin-block: 0;

    & + .tsd-panel-group {
      margin-block-start: var(--size-unit);
    }

    & .tsd-member-group + .tsd-member-group {
      margin-block-start: var(--size-xl);
    }

    & h2 {
      margin: 0;
    }
  }

  .tsd-panel {
    margin: 0;
  }

  .tsd-panel {
    &:not(:has(.tsd-signature)):not(:has(.tsd-type-parameter-list)) {
      box-shadow: var(--card-shadow);
      border-radius: var(--card-radius);
      padding: var(--card-padding);
    }

    & > h4 {
      /* border: 1px solid red; */
      display: none;
    }

    & > :last-child {
      margin-block-end: 0;
    }

    & > :first-child {
      margin-block-start: 0;
    }
  }

  .tsd-sources {
    font-size: calc(1rem / var(--ratio));
    & > ul {
      margin: 0;
    }
  }

  .tsd-signature {
    --lightness-flip: -1;
    background-color: var(--color-blank);
    padding: var(--size-unit);
  }

  .tsd-comment code {
    font-size: 85%;
    padding-inline: var(--size-2xs);
    padding-block: 0;
    display: inline-block;
    /* border: 1px solid var(--color-inline-border); */
    border-radius: var(--size-3xs);
    background-color: var(--color-bg-inline-accent);
  }

  .tsd-parameters {
    display: grid;

    & > :first-child {
      margin-block-start: 0;
      padding-block-start: 0;
    }

    & > :last-child {
      margin-block-end: 0;
      padding-block-end: 0;
    }
  }

  .tsd-parameters-title {
    display: none;
  }

  .tsd-returns-title {
    display: inline-flex;
    align-items: baseline;
    column-gap: calc(1ch / var(--ratio));
  }

  .tsd-typography thead,
  .tsd-typography tr:nth-child(even) {
    background-color: var(--color-background-secondary);
  }

  .tsd-signature-type {
    color: var(--color-text);
  }

  :is(a, span):is([class^="tsd-"], [class*=" tsd-"]) {
    font-family: monospace;
  }
}
